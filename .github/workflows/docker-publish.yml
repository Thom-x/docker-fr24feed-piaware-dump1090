name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

  release:
    types:
      - published

env:
  # TODO: Change variable to your image's name.
  DOCKERHUB_IMAGE_NAME: thomx/fr24feed-piaware
  GHCR_IMAGE_NAME: thom-x/docker-fr24feed-piaware-dump1090

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - arch: linux/amd64
            archname: amd64
            os: ubuntu-22.04
          - arch: linux/arm/v7
            archname: arm-v7
            os: ubuntu-22.04-arm
          - arch: linux/arm64
            archname: arm64
            os: ubuntu-22.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: 'tonistiigi/binfmt:latest'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ matrix.archname }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ matrix.archname }}-buildx-
      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.arch }}
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  # Push image to GitHub Packages and Docker Hub.
  push:
    # Ensure test job passes before pushing image.
    needs: test
    environment: docker
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - arch: linux/amd64
            archname: amd64
            os: ubuntu-22.04
          - arch: linux/arm/v7
            archname: arm-v7
            os: ubuntu-22.04-arm
          - arch: linux/arm64
            archname: arm64
            os: ubuntu-22.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: 'tonistiigi/binfmt:latest'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ matrix.archname }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ matrix.archname }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/$GHCR_IMAGE_NAME
      - name: Get tags list
        id: tags
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          if [[ "${{ matrix.archname }}" == "amd64" ]]; then
            # Use Docker `latest` tag convention
            [ "$VERSION" == "master" ] && TAGS=$DOCKERHUB_IMAGE_NAME:latest,ghcr.io/$GHCR_IMAGE_NAME:latest,$DOCKERHUB_IMAGE_NAME:latest-${{ matrix.archname }},ghcr.io/$GHCR_IMAGE_NAME:latest-${{ matrix.archname }}
            [ "$VERSION" != "master" ] && TAGS=$DOCKERHUB_IMAGE_NAME:$VERSION,$DOCKERHUB_IMAGE_NAME:latest,ghcr.io/$GHCR_IMAGE_NAME:$VERSION,ghcr.io/$GHCR_IMAGE_NAME:latest,$DOCKERHUB_IMAGE_NAME:$VERSION-${{ matrix.archname }},$DOCKERHUB_IMAGE_NAME:latest-${{ matrix.archname }},ghcr.io/$GHCR_IMAGE_NAME:$VERSION-${{ matrix.archname }},ghcr.io/$GHCR_IMAGE_NAME:latest-${{ matrix.archname }}             
          else
            # Use Docker `latest` tag convention
            [ "$VERSION" == "master" ] && TAGS=$DOCKERHUB_IMAGE_NAME:latest-${{ matrix.archname }},ghcr.io/$GHCR_IMAGE_NAME:latest-${{ matrix.archname }}
            [ "$VERSION" != "master" ] && TAGS=$DOCKERHUB_IMAGE_NAME:$VERSION-${{ matrix.archname }},$DOCKERHUB_IMAGE_NAME:latest-${{ matrix.archname }},ghcr.io/$GHCR_IMAGE_NAME:$VERSION-${{ matrix.archname }},ghcr.io/$GHCR_IMAGE_NAME:latest-${{ matrix.archname }}
          fi
          echo TAGS=$TAGS
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      - name: Build and push
        id: docker-build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          provenance: false
          file: ./Dockerfile
          platforms: ${{ matrix.arch }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          outputs: type=docker,dest=${{ runner.temp }}/${{ github.sha }}-${{ matrix.archname }}.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.sha }}-${{ matrix.archname }}
          path: ${{ runner.temp }}/${{ github.sha }}-${{ matrix.archname }}.tar
  # Push images to GitHub Packages and Docker Hub in a single image
  pushmanifest:
    needs: push
    environment: docker
    runs-on: ubuntu-22.04
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download artifact amd64
        uses: actions/download-artifact@v5
        with:
          name: ${{ github.sha }}-amd64
          path: ${{ runner.temp }}
      - name: Download artifact arm64
        uses: actions/download-artifact@v5
        with:
          name: ${{ github.sha }}-arm64
          path: ${{ runner.temp }}
      - name: Download artifact arm-v7
        uses: actions/download-artifact@v5
        with:
          name: ${{ github.sha }}-arm-v7
          path: ${{ runner.temp }}
      - name: Load image
        run: |
          docker load --input ${{ runner.temp }}/${{ github.sha }}-amd64.tar
          docker load --input ${{ runner.temp }}/${{ github.sha }}-arm64.tar
          docker load --input ${{ runner.temp }}/${{ github.sha }}-arm-v7.tar
      - name: Images setup docker.io
        id: image-setup-dockerhub
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "master" ] && TAGS_TAGS=$DOCKERHUB_IMAGE_NAME:latest
          [ "$VERSION" == "master" ] && TAGS_INPUTS=$DOCKERHUB_IMAGE_NAME:latest-amd64,$DOCKERHUB_IMAGE_NAME:latest-arm64,$DOCKERHUB_IMAGE_NAME:latest-arm-v7
          
          [ "$VERSION" != "master" ] && TAGS_TAGS=$DOCKERHUB_IMAGE_NAME:$VERSION,$DOCKERHUB_IMAGE_NAME:latest
          [ "$VERSION" != "master" ] && TAGS_INPUTS=$DOCKERHUB_IMAGE_NAME:$VERSION-amd64,$DOCKERHUB_IMAGE_NAME:$VERSION-arm64,$DOCKERHUB_IMAGE_NAME:$VERSION-arm-v7
          echo TAGS_TAGS=$TAGS_TAGS
          echo TAGS_INPUTS=$TAGS_INPUTS
          echo "tags=$TAGS_TAGS" >> $GITHUB_OUTPUT
          echo "inputs=$TAGS_INPUTS" >> $GITHUB_OUTPUT
      - name: Create and push manifest images
        uses: Noelware/docker-manifest-action@v1
        with:
          tags: ${{ steps.image-setup-dockerhub.outputs.tags }}
          inputs: ${{ steps.image-setup-dockerhub.outputs.inputs }}
          push: true
      - name: Images setup ghcr.io
        id: image-setup-ghcr
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "master" ] && TAGS_TAGS=ghcr.io/$GHCR_IMAGE_NAME:latest
          [ "$VERSION" == "master" ] && TAGS_INPUTS=ghcr.io/$GHCR_IMAGE_NAME:latest-amd64,ghcr.io/$GHCR_IMAGE_NAME:latest-arm64,ghcr.io/$GHCR_IMAGE_NAME:latest-arm-v7
          
          [ "$VERSION" != "master" ] && TAGS_TAGS=ghcr.io/$GHCR_IMAGE_NAME:$VERSION,ghcr.io/$GHCR_IMAGE_NAME:latest
          [ "$VERSION" != "master" ] && TAGS_INPUTS=ghcr.io/$GHCR_IMAGE_NAME:$VERSION-amd64,ghcr.io/$GHCR_IMAGE_NAME:$VERSION-arm64,ghcr.io/$GHCR_IMAGE_NAME:$VERSION-arm-v7
          echo TAGS_TAGS=$TAGS_TAGS
          echo TAGS_INPUTS=$TAGS_INPUTS
          echo "tags=$TAGS_TAGS" >> $GITHUB_OUTPUT
          echo "inputs=$TAGS_INPUTS" >> $GITHUB_OUTPUT
      - name: Create and push manifest images
        uses: Noelware/docker-manifest-action@v1
        with:
          tags: ${{ steps.image-setup-ghcr.outputs.tags }}
          inputs: ${{ steps.image-setup-ghcr.outputs.inputs }}
          push: true
